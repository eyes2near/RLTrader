# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import collector_pb2 as collector__pb2


class CollectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.collect = channel.unary_stream(
                '/CollectService/collect',
                request_serializer=collector__pb2.CollectReq.SerializeToString,
                response_deserializer=collector__pb2.Episode.FromString,
                )
        self.update_policy = channel.unary_unary(
                '/CollectService/update_policy',
                request_serializer=collector__pb2.UpdatePolicyReq.SerializeToString,
                response_deserializer=collector__pb2.UpdatePolicyResp.FromString,
                )
        self.envspecs = channel.unary_unary(
                '/CollectService/envspecs',
                request_serializer=collector__pb2.EnvSpecReq.SerializeToString,
                response_deserializer=collector__pb2.EnvSpecResp.FromString,
                )


class CollectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def collect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_policy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def envspecs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'collect': grpc.unary_stream_rpc_method_handler(
                    servicer.collect,
                    request_deserializer=collector__pb2.CollectReq.FromString,
                    response_serializer=collector__pb2.Episode.SerializeToString,
            ),
            'update_policy': grpc.unary_unary_rpc_method_handler(
                    servicer.update_policy,
                    request_deserializer=collector__pb2.UpdatePolicyReq.FromString,
                    response_serializer=collector__pb2.UpdatePolicyResp.SerializeToString,
            ),
            'envspecs': grpc.unary_unary_rpc_method_handler(
                    servicer.envspecs,
                    request_deserializer=collector__pb2.EnvSpecReq.FromString,
                    response_serializer=collector__pb2.EnvSpecResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CollectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CollectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def collect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CollectService/collect',
            collector__pb2.CollectReq.SerializeToString,
            collector__pb2.Episode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_policy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CollectService/update_policy',
            collector__pb2.UpdatePolicyReq.SerializeToString,
            collector__pb2.UpdatePolicyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def envspecs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CollectService/envspecs',
            collector__pb2.EnvSpecReq.SerializeToString,
            collector__pb2.EnvSpecResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
